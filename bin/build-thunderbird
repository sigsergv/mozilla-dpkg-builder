#!/usr/bin/env python3

# from __future__ import print_function

import sys
import os
import tempfile
import shutil
import configparser
import argparse
import re
import urllib.request
import subprocess


def copy_tpl(src, dst, values):
    with open(src, 'r') as src_fp:
        data = src_fp.read()
        data = data.format(**values)
        with open(dst, 'w') as dst_fp:
            dst_fp.write(data)

ALL_CHANNELS = ['release', 'beta', 'esr']

parser = argparse.ArgumentParser(description='Download Thunderbird binaries and repack them into a deb-package.')
parser.add_argument('--channel', dest='channel', default='release', help='Release channel, beta, release or esr, default is release')
args = parser.parse_args()


if args.channel not in ALL_CHANNELS:
    print('Unknown channel: %s' % args.channel)
    sys.exit(1)

if args.channel == 'beta':
    # not supported actually
    ARCHIVE_URL = 'https://download.mozilla.org/?product=thunderbird-beta-latest-SSL&os=linux64&lang=en-US'
elif args.channel == 'release':
    ARCHIVE_URL = 'https://download.mozilla.org/?product=thunderbird-latest-SSL&os=linux64&lang=en-US'
elif args.channel == 'esr':
    # https://download.mozilla.org/?product=thunderbird-128.4.0esr-SSL&os=linux64&lang=en-US
    ARCHIVE_URL = 'https://download.mozilla.org/?product=thunderbird-esr-latest-SSL&os=linux64&lang=en-US'

# prepare files and dirs
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
TEMPLATES_DIR = os.path.realpath(os.path.join(SCRIPT_DIR, '..', 'debian-templates', 'thunderbird'))
OUTPUT_DIR = os.path.realpath(os.path.join(SCRIPT_DIR, '..', 'build'))
BUILD_DIR = tempfile.mkdtemp()
ARCHIVE_NAME = os.path.join(BUILD_DIR, 'archive.tmp')

def cleanup():
    shutil.rmtree(BUILD_DIR)

print('Downloading archive...')
(archive_file, _hmo) = urllib.request.urlretrieve(ARCHIVE_URL, ARCHIVE_NAME)

os.chdir(BUILD_DIR)

print('Unpacking archive...')
subprocess.call(['tar', 'xf', archive_file])

COMPACT_VERSION = re.compile('^[0-9]+\\.[0-9]+$')

src_dir = os.path.join(BUILD_DIR, 'thunderbird')

tmp_dir = tempfile.mkdtemp()
# print(tmp_dir)

if not os.path.isdir(src_dir):
    print('{0} is not a directory!'.format(src_dir))
    sys.exit(1)

# read application.ini
src_app_config = configparser.ConfigParser()
try:
    src_app_config.read_file(open(os.path.join(src_dir, 'application.ini')))
    app_version = src_app_config.get('App', 'Version')
    app_build = src_app_config.get('App', 'BuildID')
except Exception as e:
    print('Failed to read application.ini: {0}'.format(str(e)))
    cleanup()
    sys.exit(1)

if COMPACT_VERSION.match(app_version) is not None:
    app_version += '.0'

full_version = '{0}.{1}'.format(app_version, app_build)
print('Detected version {0}'.format(full_version))

pkg_dst = os.path.join(tmp_dir, 'package.dir')
debian_dst = os.path.join(pkg_dst, 'DEBIAN')
os.makedirs(debian_dst)

for d in ['usr/lib/thunderbird', 'usr/share/pixmaps', 'usr/share/applications', 'usr/bin']:
    os.makedirs(os.path.join(pkg_dst, d))

conflict_channels = ALL_CHANNELS.copy()
conflict_channels.remove(args.channel)
repl = {
    'version': full_version,
    'channel': args.channel,
    'conflicts': ', '.join([f'thunderbird-{x}' for x in conflict_channels])
}
copy_tpl(os.path.join(TEMPLATES_DIR, 'control'), os.path.join(debian_dst, 'control'), repl)

# copy other files
dst_usr = os.path.join(pkg_dst, 'usr/lib/thunderbird')
for f in os.listdir(src_dir):
    p = os.path.join(src_dir, f)
    if os.path.isfile(p):
        shutil.copy(p, dst_usr)
    elif os.path.isdir(p):
        if f == 'dictionaries':
            os.symlink('../../share/hunspell', os.path.join(dst_usr, f))
        else:
            shutil.copytree(p, os.path.join(dst_usr, f))

# icons and other resources
shutil.copy(os.path.join(TEMPLATES_DIR, 'thunderbird.png'), os.path.join(pkg_dst, 'usr/share/pixmaps'))
shutil.copy(os.path.join(TEMPLATES_DIR, 'thunderbird.desktop'), os.path.join(pkg_dst, 'usr/share/applications'))

os.symlink('../lib/thunderbird/thunderbird', os.path.join(pkg_dst, 'usr/bin/thunderbird'))

cmd = ['fakeroot', '/usr/bin/dpkg', '-b', os.path.join(tmp_dir, 'package.dir'), tmp_dir]
subprocess.call(cmd)

deb_pkg = False

for f in os.listdir(tmp_dir):
    if f.endswith('.deb'):
        shutil.copy(os.path.join(tmp_dir,f), OUTPUT_DIR)
        print('Package created successfully: build/{}'.format(f))

cleanup()


